buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = 'nigerianpostcodes-api'
    version = '0.0.1'
}

repositories {
    mavenCentral()
}

configurations {
    endToEndTestCompile.extendsFrom testCompile
    endToEndTestRuntime.extendsFrom testRuntime
    newrelic // Allow for the copying of the NewRelic agent at run time.
}

ext {
    newrelicVersion='3.41.0'
}

dependencies {

    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'io.springfox:springfox-swagger2:2.4.0'
    compile 'io.springfox:springfox-swagger-ui:2.4.0'
    compile "org.apache.tomcat:tomcat-jdbc:7.0.19"
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'org.apache.commons:commons-lang3:3.5'

    compile 'org.springframework.boot:spring-boot-starter-web:1.4.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-actuator:1.4.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-configuration-processor:1.4.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.4.1.RELEASE'
    compile 'org.springframework.security:spring-security-core:4.1.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:4.1.3.RELEASE'
    compile 'org.springframework.security:spring-security-test:4.1.3.RELEASE'
    compile 'org.springframework.security:spring-security-web:4.1.3.RELEASE'
    compile 'org.springframework:spring-jdbc:4.3.3.RELEASE'
    
    compile 'mysql:mysql-connector-java:6.0.5'
    
    newrelic "com.newrelic.agent.java:newrelic-agent:${newrelicVersion}"

    testCompile 'com.jayway.jsonpath:json-path'
    testCompile 'com.jayway.jsonpath:json-path-assert'
    testCompile 'junit:junit'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

// Non-default java source sets.
sourceSets {
    test {
        java {
            srcDir 'src/test/unit/java'
        }
    }
    endToEndTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir 'src/test/endToEnd/java'
        }
        resources {
            srcDir 'src/test/endToEnd/resources'
        }
    }
}

// Run all End To End tests.
task e2e(type: Test) {
    testClassesDir = sourceSets.endToEndTest.output.classesDir
    classpath = sourceSets.endToEndTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

// Copy version file to resources root.
task copyVersionFile(type: Copy, group: 'build') {
    from 'version.properties'
    into "${project.getBuildDir()}/resources/main"
}

// Add New Relic Java Agent
task copyNewrelicAgent(type: Copy) {
    from {
        configurations.newrelic
    }
    into "$buildDir/newrelic"
    rename ("newrelic-agent-${newrelicVersion}.jar", 'newrelic.jar')
}

// Add default New Relic Configuration
task copyNewRelicConfig(type: Copy, group: 'build') {
    from 'resources/newrelic.yml'
    into "$buildDir/newrelic"
}

compileJava {
    dependsOn copyVersionFile
}

// Run e2e tests.
check.dependsOn e2e
e2e.mustRunAfter test

project.tasks.build.dependsOn('copyNewrelicAgent')
project.tasks.build.dependsOn('copyNewRelicConfig')
